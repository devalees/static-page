{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","a","fetch","fetchedAPI","json","users","this","setState","console","log","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uVAGaA,EAAO,SAACC,GACnB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eAEL,6BAAKL,EAAMI,QAAQE,OACnB,mCAAMN,EAAMI,QAAQG,MAApB,WCPOC,EAAW,SAAAR,GACpB,OACI,qBAAKC,UAAU,YAAf,SACCD,EAAMS,SAASC,KAAI,SAACN,GAAD,OAChB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLlBM,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAGpC,OACI,uBACAZ,UAAU,SACRa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCiCLG,E,kDAtCb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IALH,E,4FAQd,8BAAAC,EAAA,+EAE6BC,MACvB,8CAHN,cAEUC,EAFV,gBAKwBA,EAAWC,OALnC,OAKUC,EALV,OAMIC,KAAKC,SAAS,CAAEhB,SAAUc,IAN9B,kDAQIG,QAAQC,IAAR,MARJ,0D,0EAWA,WAAU,IAAD,SAC2BH,KAAKP,MAA/BR,EADD,EACCA,SAAUS,EADX,EACWA,YACZU,EAAmBnB,EAASoB,QAAO,SAACzB,GAAD,OACvCA,EAAQE,KAAKwB,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK7B,UAAU,MAAf,UACA,mDACE,cAAC,EAAD,CACAW,YAAc,iBACdC,aAAgB,SAAAmB,GAAC,OAAI,EAAKP,SAAS,CAAEP,YAAac,EAAEC,OAAOC,WAG3D,cAAC,EAAD,CAAUzB,SAAUmB,W,GAjCVO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d9851cd8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        alt=\"monster\"\r\n        src={`https://robohash.org/${props.monster.id}?set=set2`}\r\n      />\r\n      <h1>{props.monster.name}</h1>\r\n      <h2> {props.monster.email} </h2>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport './card-list.styles.css'\r\nimport {Card} from '../card/card.component'\r\n\r\nexport const CardList = props => {\r\n    return (\r\n        <div className=\"card-list\">\r\n        {props.monsters.map((monster) => (\r\n            <Card key={monster.id} monster={monster}/>\r\n          ))}\r\n        </div>\r\n    ) \r\n}","import React from 'react'\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => {\r\n\r\n\r\n    return (\r\n        <input\r\n        className=\"search\"\r\n          type=\"search\"\r\n          placeholder={placeholder}\r\n          onChange={handleChange}\r\n        />\r\n    )\r\n}\r\n\r\n\r\n","import { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component.jsx';\nimport {SearchBox} from './components/search-box/search-box.component.jsx'\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n  }\n  async componentDidMount() {\n    try {\n      const fetchedAPI = await fetch(\n        'https://jsonplaceholder.typicode.com/users'\n      );\n      const users = await fetchedAPI.json();\n      this.setState({ monsters: users });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n      <h1> Monsters Relodex</h1>\n        <SearchBox\n        placeholder = 'search monster'\n        handleChange = {e => this.setState({ searchField: e.target.value })}\n        />\n        \n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}